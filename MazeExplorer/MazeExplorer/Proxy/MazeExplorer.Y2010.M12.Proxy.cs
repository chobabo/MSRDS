//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.5446
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
[assembly: global::System.Reflection.AssemblyProductAttribute("MazeExplorer")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("MazeExplorer")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="MazeExplorer.Y2010.M12, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cc364a89" +
    "174f4986")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.AllowPartiallyTrustedCallersAttribute()]

namespace MazeExplorer.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2010/12/mazeexplorer.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2010/12/mazeexplorer.html", ElementName="MazeExplorerState")]
    public class MazeExplorerState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public MazeExplorerState() {
        }
        
        private bool _IsEnableOfDiffentiaDrive;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool IsEnableOfDiffentiaDrive {
            get {
                return this._IsEnableOfDiffentiaDrive;
            }
            set {
                this._IsEnableOfDiffentiaDrive = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity> _SingleShapeEntityList;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity> SingleShapeEntityList {
            get {
                return this._SingleShapeEntityList;
            }
            set {
                this._SingleShapeEntityList = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current MazeExplorerState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::MazeExplorer.Proxy.MazeExplorerState typedTarget = ((global::MazeExplorer.Proxy.MazeExplorerState)(target));
            typedTarget._IsEnableOfDiffentiaDrive = this._IsEnableOfDiffentiaDrive;
            if ((this._SingleShapeEntityList != null)) {
                int count = this._SingleShapeEntityList.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity tmp0 = default(global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity);
                    if ((this._SingleShapeEntityList[index] != null)) {
                        global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity tmp1 = new global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SingleShapeEntityList[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._SingleShapeEntityList = tmp;
            }
        }
        
        /// <summary>
        ///Clones MazeExplorerState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::MazeExplorer.Proxy.MazeExplorerState target0 = new global::MazeExplorer.Proxy.MazeExplorerState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current MazeExplorerState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._IsEnableOfDiffentiaDrive);
            if ((this._SingleShapeEntityList == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SingleShapeEntityList.Count);
                for (int indexSingleShapeEntityList = 0; (indexSingleShapeEntityList < this._SingleShapeEntityList.Count); indexSingleShapeEntityList = (indexSingleShapeEntityList + 1)) {
                    if ((this._SingleShapeEntityList[indexSingleShapeEntityList] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SingleShapeEntityList[indexSingleShapeEntityList])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes MazeExplorerState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized MazeExplorerState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._IsEnableOfDiffentiaDrive = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._SingleShapeEntityList = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._SingleShapeEntityList.Add(default(global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity));
                    if ((reader.ReadByte() != 0)) {
                        this._SingleShapeEntityList[index0] = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.SingleShapeEntity())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2010/12/mazeexplorer.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2010/12/mazeexplorer.html", ElementName="BoxState")]
    public class BoxState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public BoxState() {
        }
        
        private string _BoxType;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public string BoxType {
            get {
                return this._BoxType;
            }
            set {
                this._BoxType = value;
            }
        }
        
        private double _StartPosX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double StartPosX {
            get {
                return this._StartPosX;
            }
            set {
                this._StartPosX = value;
            }
        }
        
        private double _StartPosZ;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double StartPosZ {
            get {
                return this._StartPosZ;
            }
            set {
                this._StartPosZ = value;
            }
        }
        
        private double _EndPosX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double EndPosX {
            get {
                return this._EndPosX;
            }
            set {
                this._EndPosX = value;
            }
        }
        
        private double _EndPosZ;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double EndPosZ {
            get {
                return this._EndPosZ;
            }
            set {
                this._EndPosZ = value;
            }
        }
        
        private double _Height;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Height {
            get {
                return this._Height;
            }
            set {
                this._Height = value;
            }
        }
        
        private double _Mass;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double Mass {
            get {
                return this._Mass;
            }
            set {
                this._Mass = value;
            }
        }
        
        private string _Texture;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public string Texture {
            get {
                return this._Texture;
            }
            set {
                this._Texture = value;
            }
        }
        
        private global::Microsoft.Robotics.PhysicalModel.Proxy.Vector4 _DiffuseColor;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.PhysicalModel.Proxy.Vector4 DiffuseColor {
            get {
                return this._DiffuseColor;
            }
            set {
                this._DiffuseColor = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BoxState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::MazeExplorer.Proxy.BoxState typedTarget = ((global::MazeExplorer.Proxy.BoxState)(target));
            typedTarget._BoxType = this._BoxType;
            typedTarget._StartPosX = this._StartPosX;
            typedTarget._StartPosZ = this._StartPosZ;
            typedTarget._EndPosX = this._EndPosX;
            typedTarget._EndPosZ = this._EndPosZ;
            typedTarget._Height = this._Height;
            typedTarget._Mass = this._Mass;
            typedTarget._Texture = this._Texture;
            typedTarget._DiffuseColor = this._DiffuseColor;
        }
        
        /// <summary>
        ///Clones BoxState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::MazeExplorer.Proxy.BoxState target0 = new global::MazeExplorer.Proxy.BoxState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BoxState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._BoxType == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._BoxType);
            }
            writer.Write(this._StartPosX);
            writer.Write(this._StartPosZ);
            writer.Write(this._EndPosX);
            writer.Write(this._EndPosZ);
            writer.Write(this._Height);
            writer.Write(this._Mass);
            if ((this._Texture == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Texture);
            }
            ((Microsoft.Dss.Core.IDssSerializable)(this._DiffuseColor)).Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes BoxState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BoxState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._BoxType = reader.ReadString();
            }
            this._StartPosX = reader.ReadDouble();
            this._StartPosZ = reader.ReadDouble();
            this._EndPosX = reader.ReadDouble();
            this._EndPosZ = reader.ReadDouble();
            this._Height = reader.ReadDouble();
            this._Mass = reader.ReadDouble();
            if ((reader.ReadByte() != 0)) {
                this._Texture = reader.ReadString();
            }
            this._DiffuseColor = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector4)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.PhysicalModel.Proxy.Vector4())).Deserialize(reader)));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2010/12/mazeexplorer.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2010/12/mazeexplorer.html", ElementName="RobotPosition")]
    public class RobotPosition : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RobotPosition() {
        }
        
        private bool _IsInitialPositon;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool IsInitialPositon {
            get {
                return this._IsInitialPositon;
            }
            set {
                this._IsInitialPositon = value;
            }
        }
        
        private bool _IsInitialPositon2;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool IsInitialPositon2 {
            get {
                return this._IsInitialPositon2;
            }
            set {
                this._IsInitialPositon2 = value;
            }
        }
        
        private bool _IsInitialPositon3;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool IsInitialPositon3 {
            get {
                return this._IsInitialPositon3;
            }
            set {
                this._IsInitialPositon3 = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RobotPosition to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::MazeExplorer.Proxy.RobotPosition typedTarget = ((global::MazeExplorer.Proxy.RobotPosition)(target));
            typedTarget._IsInitialPositon = this._IsInitialPositon;
            typedTarget._IsInitialPositon2 = this._IsInitialPositon2;
            typedTarget._IsInitialPositon3 = this._IsInitialPositon3;
        }
        
        /// <summary>
        ///Clones RobotPosition
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::MazeExplorer.Proxy.RobotPosition target0 = new global::MazeExplorer.Proxy.RobotPosition();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RobotPosition to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._IsInitialPositon);
            writer.Write(this._IsInitialPositon2);
            writer.Write(this._IsInitialPositon3);
        }
        
        /// <summary>
        ///Deserializes RobotPosition
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RobotPosition</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._IsInitialPositon = reader.ReadBoolean();
            this._IsInitialPositon2 = reader.ReadBoolean();
            this._IsInitialPositon3 = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::MazeExplorer.Proxy.MazeExplorerState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::MazeExplorer.Proxy.MazeExplorerState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class InsertBox : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::System.Collections.Generic.List<global::MazeExplorer.Proxy.BoxState>, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public InsertBox() {
        }
        
        public InsertBox(global::System.Collections.Generic.List<global::MazeExplorer.Proxy.BoxState> body) : 
                base(body) {
        }
        
        public InsertBox(global::System.Collections.Generic.List<global::MazeExplorer.Proxy.BoxState> body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class MoveRobotPosition : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::MazeExplorer.Proxy.RobotPosition, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public MoveRobotPosition() {
        }
        
        public MoveRobotPosition(global::MazeExplorer.Proxy.RobotPosition body) : 
                base(body) {
        }
        
        public MoveRobotPosition(global::MazeExplorer.Proxy.RobotPosition body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateMazeState : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::MazeExplorer.Proxy.MazeExplorerState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdateMazeState() {
        }
        
        public UpdateMazeState(global::MazeExplorer.Proxy.MazeExplorerState body) : 
                base(body) {
        }
        
        public UpdateMazeState(global::MazeExplorer.Proxy.MazeExplorerState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class MazeExplorerOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: MazeExplorer.Proxy.Get, global:: MazeExplorer.Proxy.InsertBox, global:: MazeExplorer.Proxy.MoveRobotPosition, global:: MazeExplorer.Proxy.UpdateMazeState> {
        
        public MazeExplorerOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::MazeExplorer.Proxy.MazeExplorerState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::MazeExplorer.Proxy.Get operation = new global::MazeExplorer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::MazeExplorer.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::MazeExplorer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::MazeExplorer.Proxy.MazeExplorerState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::MazeExplorer.Proxy.Get operation = new global::MazeExplorer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::MazeExplorer.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::MazeExplorer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> InsertBox() {
            global::System.Collections.Generic.List<global::MazeExplorer.Proxy.BoxState> body = new global::System.Collections.Generic.List<global::MazeExplorer.Proxy.BoxState>();
            global::MazeExplorer.Proxy.InsertBox operation = new global::MazeExplorer.Proxy.InsertBox(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice InsertBox(out global::MazeExplorer.Proxy.InsertBox operation) {
            global::System.Collections.Generic.List<global::MazeExplorer.Proxy.BoxState> body = new global::System.Collections.Generic.List<global::MazeExplorer.Proxy.BoxState>();
            operation = new global::MazeExplorer.Proxy.InsertBox(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> InsertBox(global::System.Collections.Generic.List<global::MazeExplorer.Proxy.BoxState> body) {
            if ((body == null)) {
                body = new global::System.Collections.Generic.List<global::MazeExplorer.Proxy.BoxState>();
            }
            global::MazeExplorer.Proxy.InsertBox operation = new global::MazeExplorer.Proxy.InsertBox(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice InsertBox(global::System.Collections.Generic.List<global::MazeExplorer.Proxy.BoxState> body, out global::MazeExplorer.Proxy.InsertBox operation) {
            if ((body == null)) {
                body = new global::System.Collections.Generic.List<global::MazeExplorer.Proxy.BoxState>();
            }
            operation = new global::MazeExplorer.Proxy.InsertBox(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> MoveRobotPosition() {
            global::MazeExplorer.Proxy.RobotPosition body = new global::MazeExplorer.Proxy.RobotPosition();
            global::MazeExplorer.Proxy.MoveRobotPosition operation = new global::MazeExplorer.Proxy.MoveRobotPosition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice MoveRobotPosition(out global::MazeExplorer.Proxy.MoveRobotPosition operation) {
            global::MazeExplorer.Proxy.RobotPosition body = new global::MazeExplorer.Proxy.RobotPosition();
            operation = new global::MazeExplorer.Proxy.MoveRobotPosition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> MoveRobotPosition(global::MazeExplorer.Proxy.RobotPosition body) {
            if ((body == null)) {
                body = new global::MazeExplorer.Proxy.RobotPosition();
            }
            global::MazeExplorer.Proxy.MoveRobotPosition operation = new global::MazeExplorer.Proxy.MoveRobotPosition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice MoveRobotPosition(global::MazeExplorer.Proxy.RobotPosition body, out global::MazeExplorer.Proxy.MoveRobotPosition operation) {
            if ((body == null)) {
                body = new global::MazeExplorer.Proxy.RobotPosition();
            }
            operation = new global::MazeExplorer.Proxy.MoveRobotPosition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateMazeState() {
            global::MazeExplorer.Proxy.MazeExplorerState body = new global::MazeExplorer.Proxy.MazeExplorerState();
            global::MazeExplorer.Proxy.UpdateMazeState operation = new global::MazeExplorer.Proxy.UpdateMazeState(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateMazeState(out global::MazeExplorer.Proxy.UpdateMazeState operation) {
            global::MazeExplorer.Proxy.MazeExplorerState body = new global::MazeExplorer.Proxy.MazeExplorerState();
            operation = new global::MazeExplorer.Proxy.UpdateMazeState(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateMazeState(global::MazeExplorer.Proxy.MazeExplorerState body) {
            if ((body == null)) {
                body = new global::MazeExplorer.Proxy.MazeExplorerState();
            }
            global::MazeExplorer.Proxy.UpdateMazeState operation = new global::MazeExplorer.Proxy.UpdateMazeState(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateMazeState(global::MazeExplorer.Proxy.MazeExplorerState body, out global::MazeExplorer.Proxy.UpdateMazeState operation) {
            if ((body == null)) {
                body = new global::MazeExplorer.Proxy.MazeExplorerState();
            }
            operation = new global::MazeExplorer.Proxy.UpdateMazeState(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("MazeExplorer service (no description provided)")]
    [global::System.ComponentModel.DisplayNameAttribute("MazeExplorer")]
    public class Contract {
        
        public const string Identifier = "http://schemas.tempuri.org/2010/12/mazeexplorer.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.tempuri.org/2010/12/mazeexplorer.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.tempuri.org/2010/12/mazeexplorer.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.MazeExplorerOperations = new global::MazeExplorer.Proxy.MazeExplorerOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.MazeExplorerOperations, "http://schemas.tempuri.org/2010/12/mazeexplorer.html", "MazeExplorerOperations", ""));
        }
        
        public global::MazeExplorer.Proxy.MazeExplorerOperations MazeExplorerOperations;
    }
}
